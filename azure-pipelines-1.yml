trigger:
  branches:
    include:
      - master  # Ejecutar solo en la rama 'master'

pool:
  vmImage: 'ubuntu-latest'

variables:
  PROJECT_NAME: 'uptimestars'

steps:

- script: |
    echo "‚úÖ Ejecutando en rama: $(Build.SourceBranch)"
  displayName: 'Mostrar rama actual'

- script: |
    echo "üîç Diagn√≥stico inicial"
    docker --version
    find . -name "docker-compose.yml"
  displayName: 'Verificar entorno y archivos'

- task: DockerCompose@1
  displayName: 'üöÄ Build & Run Docker Compose'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: 'Uptime.Stars.Backend/docker-compose.yml'
    action: 'Run services'
    projectName: '$(PROJECT_NAME)'
    buildImages: true

# Verifica que el contenedor est√© sirviendo desde adentro
- script: |
    echo "üîÅ Verificando API desde el contenedor uptime.stars.api..."
    for i in {1..10}; do
      CONTAINER_ID=$(docker ps -qf "name=uptime.stars.api")
      if [ -z "$CONTAINER_ID" ]; then
        echo "‚ùå Contenedor uptime.stars.api no est√° en ejecuci√≥n."
        exit 1
      fi
      docker exec "$CONTAINER_ID" curl -sf http://localhost:8080 && echo "‚úÖ API disponible" && exit 0
      echo "Intento $i: API a√∫n no responde. Esperando 5 segundos..."
      sleep 5
    done
    echo "‚ùå API no respondi√≥ luego de m√∫ltiples intentos."
    exit 1
  displayName: 'Verificar API desde contenedor'

# Mostrar logs siempre, aunque algo falle
- script: |
    echo "üì¶ Contenedores activos:"
    docker ps -a

    echo "üìÑ Logs del contenedor uptime.stars.api:"
    docker logs $(docker ps -aqf "name=uptime.stars.api" || true)
  displayName: 'Mostrar logs de contenedor API'
  condition: always()
