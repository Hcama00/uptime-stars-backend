trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  PROJECT_NAME: 'uptimestars'

steps:

# 🔧 Instalar .NET 8 SDK
- task: UseDotNet@2
  displayName: '🔧 Instalar .NET 8 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

# 🧪 Ejecutar pruebas unitarias
- task: DotNetCoreCLI@2
  displayName: '🧪 Ejecutar pruebas unitarias'
  inputs:
    command: 'test'
    projects: 'Uptime.Stars.Backend/Uptime.Stars.UnitTests/Uptime.Stars.UnitTests.csproj'
    arguments: '--configuration Release --collect:"XPlat Code Coverage"'
    publishTestResults: true

# 📊 Publicar resultados de pruebas
- task: PublishTestResults@2
  displayName: '📊 Publicar resultados de pruebas'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/TestResults/*.trx'
    failTaskOnFailedTests: true

# 📈 Publicar cobertura de código
- task: PublishCodeCoverageResults@1
  displayName: '📈 Publicar cobertura de código'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

# ✅ Verifica rama
- script: |
    echo "✅ Ejecutando pipeline en rama: $(Build.SourceBranch)"
  displayName: 'Mostrar rama actual'

# 🔍 Diagnóstico básico
- script: |
    echo "🔍 Diagnóstico inicial"
    docker --version
    find . -name "docker-compose.yml"
  displayName: 'Verificar entorno y archivos'

# 🚀 Ejecutar docker-compose
- task: DockerCompose@1
  displayName: '🚀 Build & Run Docker Compose'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: 'Uptime.Stars.Backend/docker-compose.yml'
    action: 'Run services'
    projectName: '$(PROJECT_NAME)'
    buildImages: true

# 🩺 Verificar endpoint /healthz
- script: |
    echo "🩺 Verificando /healthz desde el host (con reintentos)..."
    for i in {1..10}; do
      RESPONSE=$(curl -sf http://localhost:8080/healthz || true)
      echo "Respuesta: $RESPONSE"
      if echo "$RESPONSE" | grep -q '"status":"Healthy"'; then
        echo "✅ API saludable desde el host"
        exit 0
      fi
      echo "Intento $i: aún no saludable. Esperando 5 segundos..."
      sleep 5
    done
    echo "❌ API no respondió correctamente a /healthz desde el host"
    exit 1
  displayName: 'Verificar endpoint /healthz desde host con curl'

# 📄 Mostrar logs del contenedor
- script: |
    echo "📦 Contenedores activos:"
    docker ps -a

    echo "📄 Logs del contenedor uptime.stars.api:"
    docker logs $(docker ps -aqf "name=uptime.stars.api" || true)
  displayName: 'Mostrar logs de contenedor API'
  condition: always()
