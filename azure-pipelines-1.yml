trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: SonarCloudSecrets
  - name: PROJECT_NAME
    value: 'uptimestars'

steps:

# ✅ Mostrar rama actual
- script: |
    echo "✅ Ejecutando en rama: $(Build.SourceBranch)"
  displayName: 'Mostrar rama actual'

# 🔍 Diagnóstico inicial
- script: |
    echo "🔍 Verificando entorno"
    docker --version
    dotnet --version
  displayName: 'Diagnóstico inicial'

# 🔧 Instalar SonarScanner
- script: |
    dotnet tool install --global dotnet-sonarscanner
  displayName: 'Instalar SonarScanner'

# 🟡 Iniciar análisis SonarCloud
- script: |
    export PATH="$PATH:/root/.dotnet/tools"
    dotnet-sonarscanner begin /k:"$(SONAR_PROJECT_KEY)" /o:"$(SONAR_ORGANIZATION)" /d:sonar.token="$(SONAR_TOKEN)"
  displayName: '🔎 Iniciar análisis SonarCloud'

# 🧪 Ejecutar pruebas con cobertura
- script: |
    export PATH="$PATH:/root/.dotnet/tools"
    dotnet test Uptime.Stars.Backend/Uptime.Stars.UnitTests/Uptime.Stars.UnitTests.csproj \
      --configuration Release \
      --logger "trx;LogFileName=test-results.trx" \
      --results-directory "$(Build.ArtifactStagingDirectory)/TestResults" \
      --collect:"XPlat Code Coverage"
  displayName: '🧪 Ejecutar pruebas unitarias'

# 🔵 Finalizar análisis SonarCloud
- script: |
    export PATH="$PATH:/root/.dotnet/tools"
    dotnet-sonarscanner end /d:sonar.token="$(SONAR_TOKEN)"
  displayName: '📤 Publicar análisis en SonarCloud'

# 📊 Publicar resultados de pruebas
- task: PublishTestResults@2
  displayName: '📊 Publicar resultados de pruebas'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/TestResults/*.trx'
    failTaskOnFailedTests: true

# 📈 Publicar cobertura
- task: PublishCodeCoverageResults@2
  displayName: '📈 Publicar cobertura de código'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.ArtifactStagingDirectory)/TestResults/**/coverage.cobertura.xml'

# 🐳 Build & Run Docker Compose
- task: DockerCompose@1
  displayName: '🚀 Build & Run Docker Compose'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: 'Uptime.Stars.Backend/docker-compose.yml'
    action: 'Run services'
    projectName: '$(PROJECT_NAME)'
    buildImages: true

# ⏳ Esperar servicios
- script: sleep 20
  displayName: '⏳ Delay para servicios'

# 🔍 Verificar API
- script: |
    curl -sf http://localhost:8080/healthz || (echo "❌ API no responde" && exit 1)
  displayName: '🩺 Verificar API levantada'

# 📄 Mostrar logs del contenedor
- script: |
    docker ps -a
    docker logs $(docker ps -aqf "name=uptime.stars.api" || true)
  displayName: '📄 Logs del contenedor API'
  condition: always()
