trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  PROJECT_NAME: 'uptimestars'

steps:

- script: |
    echo "‚úÖ Ejecutando pipeline en rama: $(Build.SourceBranch)"
  displayName: 'Mostrar rama actual'

- script: |
    echo "üîç Diagn√≥stico inicial"
    docker --version
    find . -name "docker-compose.yml"
  displayName: 'Verificar entorno y archivos'

- task: DockerCompose@1
  displayName: 'üöÄ Build & Run Docker Compose'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: 'Uptime.Stars.Backend/docker-compose.yml'
    action: 'Run services'
    projectName: '$(PROJECT_NAME)'
    buildImages: true

- script: |
    echo "üîÅ Verificando /healthz desde dentro del contenedor..."
    CONTAINER_ID=$(docker ps -qf "name=uptime.stars.api")
    for i in {1..10}; do
      RESPONSE=$(docker exec "$CONTAINER_ID" wget -qO- http://localhost:8080/healthz || true)
      echo "Respuesta: $RESPONSE"
      if echo "$RESPONSE" | grep -q '"status":"Healthy"'; then
        echo "‚úÖ API saludable desde contenedor"
        exit 0
      fi
      echo "Intento $i: a√∫n no saludable. Esperando 5s..."
      sleep 5
    done
    echo "‚ùå API no respondi√≥ correctamente a /healthz dentro del contenedor"
    exit 1
  displayName: 'Verificar endpoint /healthz desde contenedor'

- script: |
    echo "üì¶ Contenedores activos:"
    docker ps -a

    echo "üìÑ Logs del contenedor uptime.stars.api:"
    docker logs $(docker ps -aqf "name=uptime.stars.api" || true)
  displayName: 'Mostrar logs de contenedor API'
  condition: always()
