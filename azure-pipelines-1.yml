trigger:
  branches:
    include:
      - master  # Ejecutar solo en rama 'master'

pool:
  vmImage: 'ubuntu-latest'

variables:
  PROJECT_NAME: 'uptimestars'
  SONAR_ORGANIZATION: 'starsteam'
  SONAR_PROJECT_KEY: 'starsteam_starsteam123'
  SONAR_TOKEN: $(SONAR_TOKEN)  # ⚠️ Agrega esta variable como secreta en Azure DevOps

steps:

# ✅ Mostrar rama actual
- script: |
    echo "✅ Ejecutando en rama: $(Build.SourceBranch)"
  displayName: 'Mostrar rama actual'

# 🔍 Diagnóstico inicial
- script: |
    echo "🔍 Verificando entorno y docker-compose.yml"
    docker --version
    find . -name "docker-compose.yml"
  displayName: 'Diagnóstico inicial'

# 🔧 Instalar .NET 8 SDK
- task: UseDotNet@2
  displayName: '🔧 Instalar .NET 8 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

# 📥 Instalar SonarScanner CLI
- script: |
    dotnet tool install --global dotnet-sonarscanner
  displayName: 'Instalar SonarScanner CLI'

# 🔎 Iniciar análisis SonarCloud
- script: |
    dotnet sonarscanner begin \
      /k:"$(SONAR_PROJECT_KEY)" \
      /o:"$(SONAR_ORGANIZATION)" \
      /d:sonar.token="$(SONAR_TOKEN)" \
      /d:sonar.cs.opencover.reportsPaths="$(Build.ArtifactStagingDirectory)/TestResults/**/coverage.opencover.xml"
  displayName: 'Iniciar análisis SonarCloud'

# 🧪 Ejecutar pruebas unitarias con cobertura
- script: |
    dotnet test Uptime.Stars.Backend/Uptime.Stars.UnitTests/Uptime.Stars.UnitTests.csproj \
      --configuration Release \
      --logger "trx;LogFileName=test-results.trx" \
      --results-directory "$(Build.ArtifactStagingDirectory)/TestResults" \
      --collect:"XPlat Code Coverage"
  displayName: 'Ejecutar pruebas unitarias'

# 📤 Finalizar análisis SonarCloud
- script: |
    dotnet sonarscanner end /d:sonar.token="$(SONAR_TOKEN)"
  displayName: 'Finalizar análisis SonarCloud'

# 📊 Publicar resultados de pruebas
- task: PublishTestResults@2
  displayName: '📊 Publicar resultados de pruebas'
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/TestResults/*.trx'
    failTaskOnFailedTests: true

# 📈 Publicar cobertura de código
- task: PublishCodeCoverageResults@2
  displayName: '📈 Publicar cobertura de código'
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.ArtifactStagingDirectory)/TestResults/**/coverage.cobertura.xml'

# 📦 Publicar artefactos: resultados de test
- task: PublishBuildArtifacts@1
  displayName: '📦 Publicar artefactos'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/TestResults'
    ArtifactName: 'test-results'
    publishLocation: 'Container'

# 🚀 Build & Run Docker Compose
- task: DockerCompose@1
  displayName: '🚀 Build & Run Docker Compose'
  inputs:
    containerregistrytype: 'Container Registry'
    dockerComposeFile: 'Uptime.Stars.Backend/docker-compose.yml'
    action: 'Run services'
    projectName: '$(PROJECT_NAME)'
    buildImages: true

# ⏳ Esperar servicios
- script: |
    echo "⏳ Esperando arranque de servicios..."
    sleep 20
  displayName: 'Delay para servicios'

# 🩺 Verificar endpoint /healthz
- script: |
    echo "🩺 Verificando /healthz desde el host (con reintentos)..."
    for i in {1..10}; do
      RESPONSE=$(curl -sf http://localhost:8080/healthz || true)
      echo "Respuesta: $RESPONSE"
      if echo "$RESPONSE" | grep -q '"status":"Healthy"'; then
        echo "✅ API saludable desde el host"
        exit 0
      fi
      echo "Intento $i: aún no saludable. Esperando 5 segundos..."
      sleep 5
    done
    echo "❌ API no respondió correctamente a /healthz desde el host"
    exit 1
  displayName: 'Verificar endpoint /healthz desde host con curl'

# 📄 Mostrar logs del contenedor API
- script: |
    echo "📦 Contenedores activos:"
    docker ps -a
    echo "📄 Logs del contenedor uptime.stars.api:"
    docker logs $(docker ps -aqf "name=uptime.stars.api" || true)
  displayName: 'Mostrar logs de contenedor API'
  condition: always()
